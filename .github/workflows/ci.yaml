name: CI

on:
  push:
    branches:
      - main
      - 'feat/*'

jobs:
  lint:
    name: Lint the project
    runs-on: ubuntu-20.04
    steps:
      - name: Run `fantomas` to lint the project
        continue-on-error: false
        run: echo "Linting project"

  test:
    name: Run tests
    needs: lint
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: |
          dotnet restore src/myfsharpapp
          dotnet restore tests/myfsharpapp.test

      - name: Run Tests
        run: |
          dotnet test tests/myfsharpapp.test

  build:
    name: Build project
    needs: test
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.x'

      - name: Build
        run: dotnet build src/myfsharpapp

  docker:
    name: Docker
    needs: build
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build Docker Image
        run: docker build -t docker_image .

      - name: Login to GitHub Container Registry
        # runs only in main
        if: github.ref == 'refs/heads/main'
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and Push Docker image
        # runs only in main
        if: github.ref == 'refs/heads/main'
        run: |
          LAST_COMMIT_DT=$(git log -1 --format="%at" | xargs -I{} date -d @{} +%Y.%m.%d-%H.%M.%S)
          DEPLOYMENT_TAG=${LAST_COMMIT_DT}
          IMAGE_NAME="${{ vars.REGISTRY_DOMAIN }}/${{ vars.REGISTRY_NAME }}"

          docker tag docker_image:latest ${IMAGE_NAME}:${DEPLOYMENT_TAG}
          docker push ${IMAGE_NAME}:${DEPLOYMENT_TAG}

          mkdir -p deploys/${{ github.run_id }}
          echo $DEPLOYMENT_TAG > deploys/${{ github.run_id }}/deploy_tag
      
      - name: Upload deploy tag
        uses: actions/upload-artifact@v2
        with:
          name: deploy_tag
          path: deploys/${{ github.run_id }}/deploy_tag
          retention-days: 7

  deploy-dev:
    name: Deploy to Dev
    if: github.event_name == 'pull_request'
    needs: docker
    runs-on: ubuntu-20.04
    environment:
      name: Development
    steps:
      - name: Get deploy tag
        uses: actions/download-artifact@v2
        with:
          name: deploy_tag
          path: deploys/${{ github.run_id }}

      - name: Deploy
        run: echo "Deploying to DEV! $(cat deploys/${{ github.run_id }}/deploy_tag)"

  deploy-staging:
    name: Deploy to Staging
    if: github.event.ref == 'refs/heads/main'
    needs: docker
    runs-on: ubuntu-20.04
    environment:
      name: Staging
    steps:
      - name: Get deploy tag
        uses: actions/download-artifact@v2
        with:
          name: deploy_tag
          path: deploys/${{ github.run_id }}

      - name: Deploy
        run: echo "Deploying to STAGE! $(cat deploys/${{ github.run_id }}/deploy_tag)"

  deploy-production:
    name: Deploy to Production
    if: github.event.ref == 'refs/heads/main'
    needs: deploy-staging
    runs-on: ubuntu-20.04
    environment:
      name: Production
    steps:
      - name: Get deploy tag
        uses: actions/download-artifact@v2
        with:
          name: deploy_tag
          path: deploys/${{ github.run_id }}

      - name: Deploy
        run: echo "Deploying to PROD! $(cat deploys/${{ github.run_id }}/deploy_tag)"
